// Code generated by mockery. DO NOT EDIT.

package httpoh

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockResponse is an autogenerated mock type for the Response type
type MockResponse struct {
	mock.Mock
}

type MockResponse_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResponse) EXPECT() *MockResponse_Expecter {
	return &MockResponse_Expecter{mock: &_m.Mock}
}

// ProcessResponse provides a mock function with given fields: r
func (_m *MockResponse) ProcessResponse(r *http.Response) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ProcessResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Response) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResponse_ProcessResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessResponse'
type MockResponse_ProcessResponse_Call struct {
	*mock.Call
}

// ProcessResponse is a helper method to define mock.On call
//   - r *http.Response
func (_e *MockResponse_Expecter) ProcessResponse(r interface{}) *MockResponse_ProcessResponse_Call {
	return &MockResponse_ProcessResponse_Call{Call: _e.mock.On("ProcessResponse", r)}
}

func (_c *MockResponse_ProcessResponse_Call) Run(run func(r *http.Response)) *MockResponse_ProcessResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Response))
	})
	return _c
}

func (_c *MockResponse_ProcessResponse_Call) Return(_a0 error) *MockResponse_ProcessResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResponse_ProcessResponse_Call) RunAndReturn(run func(*http.Response) error) *MockResponse_ProcessResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResponse creates a new instance of MockResponse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResponse {
	mock := &MockResponse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
